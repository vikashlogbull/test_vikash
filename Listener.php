<?php
// This file is generated by Composer
require_once 'php-github-api-master/vendor/autoload.php';

use lib\Github\Client;
use lib\Github\Api\Repo;
use lib\Github\Api\Authorizations;


class Vhost {
    //Fuction to create Repository.
    function VhostSite($NewSite, $document_root, $vhostdefault, $sitevhost, $siteenable, $siteurl) {
        if( is_dir($document_root) === false ) {
            mkdir($document_root);
        }
        copy($vhostdefault, $sitevhost);
        $oldstring2 = "/var/www/html";
        $newstring2 = "/var/www/html/".$NewSite;
	$oldurlstring = "#ServerName www.example.com";
	$newurlstring = "ServerName ".$siteurl;

        $str2=file_get_contents($sitevhost);
        $newstr2=str_replace("$oldstring2", "$newstring2",$str2);
        file_put_contents($sitevhost, $newstr2);

	$str3=file_get_contents($sitevhost);
	$newurlstr=str_replace("$oldurlstring", "$newurlstring", $str3);
	file_put_contents($sitevhost, $newurlstr);

        symlink($sitevhost, $siteenable);
    }//Function VhostSite End
}//Class Vhost End

class JsonFormat {
      public $dns_name = "";
      public $site_path  = "";
  }


class Sites {
	//Fuction to create Repository.
	function ListSites($sitedetailfile) {
		$file = file( $sitedetailfile );
		if( $file == false ) {
            echo ( "Error in opening file\n" );
            exit();
        }
        foreach( $file as $line ) {
        	if ( $line[0] === "$") {
        		$tempDNS1 = strstr($line, '=', true);
        		preg_match_all('/\'(.*)\'/', $tempDNS1, $matches1);
        		$tempDNS2 = $matches1[0][0];
        		$DNS = trim($tempDNS2, "'");
        		$tempSitepath1 = strstr($line, '=');
        		preg_match_all('/\'(.*)\'/', $tempSitepath1, $matches2);
        		$tempSitepath2 = $matches2[0][0];
        		$Sitepath = trim($tempSitepath2, "'");
        		$json_detail = new JsonFormat();
        		$json_detail->dns_name = $DNS;
        		$json_detail->site_path = $Sitepath;
        	}
        }       
	}//Function CreateRepo() End
}//Class GitRepoCreate End


class GitRepoCreate {
    //Fuction to create Repository.
    function CreateRepo($UserName, $Token, $sitename, $RepoGitUrl, $Description) {
        $client = new \Github\Client();
        $client->authenticate($UserName, $Token);

        $repo = new Github\Api\Repo($client);
        $myrepo = $repo->create($sitename, $Description, $RepoGitUrl, true);
        $myrepo_json = json_decode(json_encode($myrepo), true);
        $html_url = $myrepo_json["html_url"];
        return $html_url;
    }//Function CreateRepo() End
}//Class GitRepoCreate End

class Gitignore { // Class for Gitignore property.
    // Function for gitignore file.
    function siteGitignore($site_filesys_path) {
        $filename = $site_filesys_path."/.gitignore";
	$SettingFile = "sites/*/settings*.php";
	$SitesFile = "sites/sites*.php";

	if (!file_exists($filename)) {
	    $handle = fopen($filename, 'w') or die('Cannot open file:  '.$filename);
	    fwrite($handle, "\n".$SettingFile);
	    fwrite($handle, "\n".$SitesFile);
	    fclose($handle);
	}
	else {
	    $file = file($filename);
	    $FlagSetting = False;
	    $FlagSites = False;
	    foreach( $file as $line ) {
		if (preg_match("/^sites\/\*\/settings\*\.php$/", $line)) { $FlagSetting = True; }
		if (preg_match("/^sites\/sites\*\.php$/", $line)) { $FlagSites = True; }
	    }
	    $handle = fopen($filename, 'a') or die('Cannot open file:  '.$filename);
	    if (!$FlagSetting) { fwrite($handle, "\n".$SettingFile); }
	    if (!$FlagSites) { fwrite($handle, "\n".$SitesFile); }
	    fclose($handle);
	}
    }//Function siteGitignore() End
}//Class Gitignore End

class Listener {
// Function to create a site.
// Description
// Input: <TBD>
// Output: <TBD>
    function CreateSiteListener() {
        // Get input to the script 
        $apikey =  $_GET["apikey"];
        $sitename = $_GET["sitename"];
        $companyid =  $_GET["companyid"];
        $siteurl =  $_GET["siteurl"];
        $giturl =  $_GET["giturl"];
        $environment =  $_GET["environment"];
        $InstallType = $_GET["InstallType"];
        $Distribution = $_GET["Distribution"];
        $distributionurl = $_GET["distributionurl"];
        $drup_dbname = $_GET["drup_dbname"];
        $db_ip = $_GET["db_ip"];
        $dbuser = $_GET["dbuser"];
        $password = $_GET["password"];
	$NewSite = $_GET["NewSite"];

        //Get Input to the script for Git Repository create.
        $UserName = $_GET["username"];
        $Token = $_GET["token"];
        $RepoGitUrl = $_GET["repogiturl"];
        $Description = $_GET["description"];

        try {
            if ($apikey != null) {
                $doc_root = $_SERVER['DOCUMENT_ROOT'];
                chdir ($doc_root);
                exec('mkdir ' .$doc_root.'/' .$NewSite);
                chdir ($doc_root.'/'.$NewSite);
                $GitURL = $giturl;
                $DBUser = '';
                $DBPassword = '';
                $DBHost = '';
                $DBName = '';
	        $DBLocation = '';

	        $StepSettings = '$databases[\'default\'][\'default\']';
	        $StepSettings .= ' = array(\'database\' => \''.$drup_dbname;
	        $StepSettings .= '\',\'username\' => \''.$dbuser;
	        $StepSettings .= '\',\'password\' => \''.$password;
	        $StepSettings .= '\',\'host\' => \''.$db_ip;
	        $StepSettings .= '\',\'port\' => \'\',\'driver\' => \'mysql\',\'prefix\' => \'\');';
                $SitesFilePath = "sites/sites.php";
                $SettingsFilePath = "sites/default/settings.php";
            
                try {
                    if ($InstallType == 'GIT' || $InstallType == 'GITHUB' ) {
                        exec('git clone '.$GitURL);
                        $innerDir = exec('ls');
		        exec('cp -r '.$innerDir.'/* .');
		        exec('rm -rf '.$innerDir);
	                $site_filesys_path = $doc_root.'/'.$NewSite;
                        exec('mkdir '.$site_filesys_path.'/sites/default/files' );
	                $StepSite = '$sites[\''.$siteurl.'\'] = \'all\';';
		        exec('cp sites/example.sites.php sites/sites.php');
                        exec('cp sites/default/default.settings.php sites/default/settings.php');
		        $fileappendsite = fopen($SitesFilePath, 'a') or die('Unable to open file!');
		        fwrite($fileappendsite, "\n". $StepSite);
		        fclose($fileappendsite);
		        $fileappendsetting = fopen($SettingsFilePath, 'a') or die('Unable to open file!');
		        fwrite($fileappendsetting, "\n". $StepSettings);
		        fclose($fileappendsetting);
                    }
                }
                catch(Exception $e){
                    echo $e->getMessage();
                }

                if ($InstallType == 'FRESH' && $Distribution != 'null') {
                    try {
                        exec('wget ' .$distributionurl);
                        $innerDir = exec('ls');
                        exec('unzip ' .$innerDir);
                        exec('rm *.zip');
                        $innerDir = exec('ls');
		        exec('cp -r '.$innerDir.'/* .');
		        exec('rm -rf '.$innerDir);
	                $site_filesys_path = $doc_root.'/'.$NewSite;
                        exec('mkdir '.$site_filesys_path.'/sites/default/files' );
	                $StepSite = '$sites[\''.$siteurl.'\'] = \'all\';';
                        getcwd();
		        exec('cp sites/example.sites.php sites/sites.php');
                        exec('cp sites/default/default.settings.php sites/default/settings.php');
		        $fileappendsite = fopen($SitesFilePath, 'a') or die('Unable to open file!');
		        fwrite($fileappendsite, "\n". $StepSite);
		        fclose($fileappendsite);
		        $fileappendsetting = fopen($SettingsFilePath, 'a') or die('Unable to open file!');
		        fwrite($fileappendsetting, "\n". $StepSettings);
		        fclose($fileappendsetting);
                    }
                    catch(Exception $e){
                        echo $e->getMessage();
                    }

		    // Integrate Git Repo creation code.
                    $gitrepoobj = new GitRepoCreate(); //Object of GitRepoCreate Class.
                    $createrepos = $gitrepoobj->CreateRepo($UserName, $Token, $sitename, $RepoGitUrl, $Description);
                    $repoauth1 = $UserName.":".$Token."@github.com";
                    $repoauth2 = str_replace("github.com", $repoauth1, $createrepos);
                    $RemoteGitURL = $repoauth2.".git";

                    exec('git init');
                    $gitignore = new Gitignore();//Object of Gitignore Class.
		    $gittest = $gitignore->siteGitignore($site_filesys_path);
                    exec('git add *');
                    exec('git commit -m "First commit" ');
                    exec('git remote add origin '.$RemoteGitURL);
                    exec('git remote -v');
                    exec('git push origin master');
	        }

	        // Integrate Drupal DB.
                $con = mysql_connect($db_ip, $dbuser, $password) or die("Could not connect: " . mysql_error());  
                $result = mysql_query("CREATE DATABASE ".$drup_dbname);
                $backupfile = "/var/www/html/drupal.sql";
                $restoredb =<<<EOF
                mysql -u '$dbuser' -p'$password' -h '$db_ip'  '$drup_dbname'< '$backupfile'
EOF;
                exec($restoredb);
                //Get the List of Subsites.
                $siteobj = new Sites(); //Object of GitRepoCreate Class.
                $sitelist = $siteobj->ListSites($SitesFilePath);

                //Vhost creation function call
                $document_root = $doc_root."/".$NewSite."/".$innerDir;
                $vhostdefault = "/etc/apache2/sites-available/000-default.conf";
                $sitevhost = "/etc/apache2/sites-available/".$siteurl.".conf";
                $siteenable = "/etc/apache2/sites-enabled/".$siteurl.".conf";
                $vhostobj = new Vhost();//Object of VhostSite Class.
                $vhostcreate = $vhostobj->VhostSite($NewSite,$document_root,$vhostdefault,$sitevhost,$siteenable, $siteurl);
            }
        }
        catch(Exception $e){
            echo $e->getMessage();
        }
         
        if (error_get_last() != null) {
            $flag = "Failed";
            $returnmsg = http_response_code(501);
            $msgdesc = "Something wrong";
            return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
        } else {
            $flag = "Success";
            $returnmsg = "100";
            $msgdesc = "Operation done successfully from Listener";
            return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
        }
         
        #else {
            #$flag = "Failed";
            #$returnmsg = http_response_code(401);
            #$msgdesc = "Invalid APIKEY";
            #return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );}
    } //Function closed

      //function to delete site.
    function DeleteSiteListener() {
        // Get input to the function
        $deletesitename = $_GET["deletesitename"];
	$siteurl = $_GET["siteurl"];
        try {
            $doc_root = $_SERVER['DOCUMENT_ROOT'];
            chdir ($doc_root);
            $SiteToDel = $deletesitename;
            exec('rm -rf ' .$SiteToDel);
            exec('rm /etc/apache2/sites-enabled/'.$siteurl.'.conf');
            exec('rm /etc/apache2/sites-available/'.$siteurl.'.conf');

            if (error_get_last() != null) {
                $flag = "Failed";
                $returnmsg = http_response_code(501);
                $msgdesc = "Something wrong";
                return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
            } else {
                $flag = "Success";
                $returnmsg = "100";
                $msgdesc = "Operation done successfully from Listener";
                return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
            }
        }
        catch(Exception $e) {
            $e->getMessage();
        }

    }//close function delete site.
      //function to sub site.
    function CreateSubSiteListener() {
        // Get input to the function
        $sitename = $_GET["sitename"];
        $subsitename = $_GET["subsitename"];
        $drupalfilepath = $_GET["drupfolderpath"];
	$subsiteurl = $_GET["subsiteurl"];
        $UserName = $_GET["username"];
        $Token = $_GET["token"];
        $RepoGitUrl = $_GET["repogiturl"];
        $Description = $_GET["description"];
        $drup_dbname = $_GET["drup_dbname"];
        $db_ip = $_GET["db_ip"];
        $dbuser = $_GET["dbuser"];
        $password = $_GET["password"];
        $doc_root = $_SERVER['DOCUMENT_ROOT'];

        $StepSettings = '$databases[\'default\'][\'default\']';
        $StepSettings .= ' = array(\'database\' => \''.$drup_dbname;
        $StepSettings .= '\',\'username\' => \''.$dbuser;
        $StepSettings .= '\',\'password\' => \''.$password;
        $StepSettings .= '\',\'host\' => \''.$db_ip;
        $StepSettings .= '\',\'port\' => \'\',\'driver\' => \'mysql\',\'prefix\' => \'\');';
        $SitesFilePath = "sites/sites.php";
        $SettingsFilePath = "sites/".$subsiteurl."/settings.php";

        #chdir ($drupalfilepath.'/sites');
        chdir ($drupalfilepath);
        exec('mkdir sites/' .$subsiteurl);
        exec('mkdir sites/'.$subsiteurl.'/files');
        exec('cp -r ' .$drupalfilepath.'/sites/all/* '.$drupalfilepath.'/sites/'.$subsiteurl.'/');
	$StepSite = '$sites[\''.$subsiteurl.'\'] = \''.$subsiteurl.'/\';';
        getcwd();
        exec('cp sites/default/default.settings.php sites/'.$subsiteurl.'/settings.php');
	$fileappendsite = fopen($SitesFilePath, 'a') or die('Unable to open file!');
	fwrite($fileappendsite, "\n". $StepSite);
	fclose($fileappendsite);
	$fileappendsetting = fopen($SettingsFilePath, 'a') or die('Unable to open file!');
	fwrite($fileappendsetting, "\n". $StepSettings);
	fclose($fileappendsetting);

	// Integrate Git Repo creation code.
        $gitrepoobj = new GitRepoCreate(); //Object of GitRepoCreate Class.
        $createrepos = $gitrepoobj->CreateRepo($UserName, $Token, $sitename, $RepoGitUrl, $Description);
        $repoauth1 = $UserName.":".$Token."@github.com";
        $repoauth2 = str_replace("github.com", $repoauth1, $createrepos);
        $RemoteGitURL = $repoauth2.".git";

        exec('git init');
        exec('git add *');
        exec('git commit -m "First commit" ');
        exec('git remote add origin '.$RemoteGitURL);
        exec('git remote -v');
        exec('git push origin master');

        // Integrate Drupal DB.
        $con = mysql_connect($db_ip, $dbuser, $password) or  
               die("Could not connect: " . mysql_error());  
        $result = mysql_query("CREATE DATABASE ".$drup_dbname);
        $backupfile = "/var/www/html/drupal.sql";
        $restoredb =<<<EOF
        mysql -u '$dbuser' -p'$password' -h '$db_ip'  '$drup_dbname'< '$backupfile'
EOF;
        exec($restoredb);
        //Get the List of Subsites.
        $siteobj = new Sites(); //Object of GitRepoCreate Class.
        $sitelist = $siteobj->ListSites($SitesFilePath);

        //Vhost creation function call
        $document_root = $doc_root."/".$sitename."/sites/".$subsiteurl;
        $vhostdefault = "/etc/apache2/sites-available/000-default.conf";
        $sitevhost = "/etc/apache2/sites-available/".$subsiteurl.".conf";
        $siteenable = "/etc/apache2/sites-enabled/".$subsiteurl.".conf";
        $subsitepath = $sitename."/sites/".$subsiteurl;
        $vhostobj = new Vhost();//Object of VhostSite Class.
        $vhostcreate = $vhostobj->VhostSite($subsitepath,$document_root,$vhostdefault,$sitevhost,$siteenable, $subsiteurl);

        if (error_get_last() != null) {
            $flag = "Failed";
            $returnmsg = http_response_code(501);
            $msgdesc = "Something wrong";
            return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
        } else {
            $flag = "Success";
            $returnmsg = "100";
            $msgdesc = "Operation done successfully from Listener";
            return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
        }

    }//close function Create Sub site

    function DeleteSubSiteListener() {
        $filesystempath = $_GET["filesystempath"];
        $subsiteurl = $_GET["subsiteurl"];
        try {
	    $doc_root = $filesystempath;
            chdir ($doc_root);
            $SiteToDel = $filesystempath;
            exec('rm -rf ' .$SiteToDel);
            exec('rm /etc/apache2/sites-enabled/'.$subsiteurl.'.conf');
            exec('rm /etc/apache2/sites-available/'.$subsiteurl.'.conf');
 
            if (error_get_last() != null) {
                $flag = "Failed";
                $returnmsg = http_response_code(501);
                $msgdesc = "Something wrong";
               return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
            } else {
                $flag = "Success";
                $returnmsg = "100";
                $msgdesc = "Operation done successfully from Listener";
                return array("Status"=>$flag,"MsgCode"=>$returnmsg ,"msgdescription"=>$msgdesc );
            }
        }
        catch(Exception $e) {
           $e->getMessage();
        }
    }//close function Delete Sub site
} //Class Closed

$obj = new Listener();
$actionListener = $_GET["listeneraction"];
if ($actionListener == 'createsite') {
    $myValue = $obj->CreateSiteListener();
    header('Content-Type: application/json');
}
elseif($actionListener == 'createsubsite'){
    $myValue = $obj->CreateSubSiteListener();
    header('Content-Type: application/json');
}
elseif($actionListener == 'deletesubsite'){
    $myValue = $obj->DeleteSubSiteListener();
    header('Content-Type: application/json');
}
elseif($actionListener == 'deletesite') {
    $myValue = $obj->DeleteSiteListener();
    header('Content-Type: application/json');
}
else
{
    echo "Please Enter the valid Listener Action";
}

?>
